version: "3.8"

networks:
  frontend:
  backend:
  kafka:
  monitoring:
  monitoring_api:

volumes:
  redpanda-schema-registry:
    driver: local
  schema-registry-secret:
    driver: local
  grafana-storage:
    driver: local
  prometheus-storage:
    driver: local

services:
  front:
    build:
      context: ./services/front
      dockerfile: ../../cd/docker/front/Dockerfile
      args: {}
    ports:
      - "8080:8080"
    networks:
      - frontend
    profiles:
      - all

  api: &api
    hostname: rgb-api
    build:
      context: ./services/api
      dockerfile: ../../cd/docker/api/Dockerfile
      args:
        PYTHON_VERSION: 3.8
        POETRY_VERSION: 1.2.0
    command:
      - "uvicorn"
      - "app.main:app"
      - "--host=0.0.0.0"
      - "--port=8000"
      - "--log-config=logger.yml"
      - "--reload"
      - "--reload-include"
      - "*.env"
    ports:
      - "8000:8000"
    env_file:
      - ./services/api/envs/docker.env
    volumes:
      - "./services/api:/workspace" # inject workspace for live reload
    networks:
      - frontend
      - backend
      - monitoring_api

  schema-updater:
    <<: *api
    ports: []
    volumes:
      - "./services/api:/workspace"
    command: ["python", "scripts/update_schemas.py"]
    networks:
      - backend
    depends_on:
      kafka-schema-registry:
        condition: service_healthy

  zookeeper:
    image: "bitnami/zookeeper:latest"
    # ports:
    #   - "2181:2181"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    networks:
      - kafka

  kafka:
    image: "bitnami/kafka:latest"
    # ports:
    #   - "9092:9092"
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://:9092
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
    depends_on:
      - zookeeper
    networks:
      - kafka
      - backend

  kafka-schema-registry:
    image: confluentinc/cp-schema-registry:latest
    environment:
      - SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS=PLAINTEXT://kafka:9092
      - SCHEMA_REGISTRY_HOST_NAME=kafka-schema-registry
    networks:
      - kafka
      - backend
    volumes:
      - "schema-registry-secret:/etc/schema-registry/secrets"
    # ports:
    #   - "8081:8081"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/subjects"]
      interval: 3s
      timeout: 3s
      retries: 10
      start_period: 5s

  red-panda:
    image: "docker.redpanda.com/vectorized/console:latest"
    volumes:
      - "./cd/docker/redpanda/config.yaml:/app/config.yaml" # inject config
      - "redpanda-schema-registry:/var/lib/redpanda/data"
    ports:
      - "9000:8080"
    environment:
      - CONFIG_FILEPATH=/app/config.yaml
    networks:
      - kafka
    depends_on:
      kafka:
        condition: service_started
      kafka-schema-registry:
        condition: service_healthy

  grafana:
    image: grafana/grafana:9.2.8
    ports:
      - "3000:3000"
    networks:
      - kafka
      - monitoring
    volumes:
      - "./cd/docker/monitoring/grafana/grafana.ini:/etc/grafana/grafana.ini" # init config
      - "./cd/docker/monitoring/grafana/provisioning:/etc/grafana/provisioning" # provision datasource & providers
      - "./cd/docker/monitoring/grafana/dashboards:/var/lib/grafana/dashboards" # provision dashboards
      - "grafana-storage:/var/lib/grafana"

  prometheus:
    image: prom/prometheus:latest
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--web.enable-admin-api"
    ports:
      - "9090:9090"
    networks:
      - monitoring
      - monitoring_api
    volumes:
      - "prometheus-storage:/prometheus"
      - "./cd/docker/monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml"
