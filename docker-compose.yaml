version: "3.8"

networks:
  frontend:
    driver: bridge
  backend:
    driver: bridge
  kafka:
    driver: bridge

volumes:
  zookeeper_data:
    driver: local
  kafka_data:
    driver: local
  redpanda-schema-registry:
    driver: local

services:
  front:
    build:
      context: ./services/front
      dockerfile: ../../cd/docker/front/Dockerfile
      args: {}
    ports:
      - "8080:8080"
    networks:
      - frontend

  api:
    hostname: rgb-api
    build:
      context: ./services/api
      dockerfile: ../../cd/docker/api/Dockerfile
      args:
        PYTHON_VERSION: 3.8
        POETRY_VERSION: 1.2.0
    command:
      - "--host=0.0.0.0"
      - "--port=8000"
      - "--log-config=logger.yml"
      - "--reload"
      - "--reload-include"
      - "*.env"
    ports:
      - "8000:8000"
    env_file:
      - ./services/api/envs/docker.env
    volumes:
      - "./services/api/app:/workspace/app" # inject code for live reload
      - "./services/api/envs/docker.env:/workspace/application.env" # inject environment
    networks:
      - frontend
      - backend

  zookeeper:
    image: "bitnami/zookeeper:latest"
    ports:
      - "2181:2181"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    networks:
      - kafka

  kafka:
    image: "bitnami/kafka:latest"
    ports:
      - "9092:9092"
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://host.docker.internal:9092
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
    depends_on:
      - zookeeper
    networks:
      - kafka
      - backend

  kafka-schema-registry:
    image: confluentinc/cp-schema-registry:latest
    environment:
      - SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS=PLAINTEXT://kafka:9092
      - SCHEMA_REGISTRY_HOST_NAME=kafka-schema-registry
    networks:
      - kafka
    ports:
      - "8081:8081"

  red-panda:
    image: "docker.redpanda.com/vectorized/console:latest"
    volumes:
      - "./cd/docker/redpanda/config.yaml:/app/config.yaml" # inject config
      - "redpanda-schema-registry:/var/lib/redpanda/data"
    ports:
      - "9000:8080"
    environment:
      - CONFIG_FILEPATH=/app/config.yaml
    networks:
      - kafka
    depends_on:
      - kafka
      - kafka-schema-registry
    restart: on-failure
